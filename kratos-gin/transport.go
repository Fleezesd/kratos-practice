package gin

import (
	"net/http"

	"github.com/go-kratos/kratos/v2/transport"
)

const (
	// Kind defines the type of Transport
	KindGin transport.Kind = "gin"
)

var _ Transporter = &Transport{}

type Transporter interface {
	transport.Transporter
	Request() *http.Request
	PathTemplate() string
}

// Transport is an HTTP transport.
type Transport struct {
	endpoint     string
	operation    string
	reqHeader    headCarrier
	replyHeader  headCarrier
	request      *http.Request
	pathTemplate string
}

// Kind transporter
func (tr *Transport) Kind() transport.Kind {
	return KindGin
}

// Endpoint return server or client endpoint
func (tr *Transport) Endpoint() string {
	return tr.endpoint
}

// Operation Service full method selector generated by protobuf

func (tr *Transport) Operation() string {
	return tr.operation
}

// RequestHeader return transport request header
// http: http.Header
// grpc: metadata.MD
func (tr *Transport) RequestHeader() transport.Header {
	return tr.reqHeader
}

// ReplyHeader return transport reply/response header
// only valid for server transport
// http: http.Header
// grpc: metadata.MD
func (tr *Transport) ReplyHeader() transport.Header {
	return tr.replyHeader
}

func (tr *Transport) Request() *http.Request {
	return tr.request
}

func (tr *Transport) PathTemplate() string {
	return tr.pathTemplate
}

// http header 操作
type headCarrier http.Header

// Get returns the value associated with the passed key.
func (hc headCarrier) Get(key string) string {
	return http.Header(hc).Get(key)
}

// Set stores the key-value pair.
func (hc headCarrier) Set(key string, value string) {
	http.Header(hc).Set(key, value)
}

// Add append value to key-values pair.
func (hc headCarrier) Add(key string, value string) {
	http.Header(hc).Add(key, value)
}

// Values returns a slice of values associated with the passed key.
func (hc headCarrier) Values(key string) []string {
	return http.Header(hc).Values(key)
}

// Keys lists the keys stored in this carrier.
func (hc headCarrier) Keys() []string {
	keys := make([]string, 0, len(hc))
	for k := range http.Header(hc) {
		keys = append(keys, k)
	}
	return keys
}
